import { Module } from '@nestjs/common';
import { JwtModule } from '@nestjs/jwt';
import { PassportModule } from '@nestjs/passport';
import { TypeOrmModule } from '@nestjs/typeorm';
import { ApiConfigService } from '@realworld/shared/api/config';
import { User } from './user.entity';
import { UserService } from './user.service';

@Module({
  // This module uses the forFeature() method to define which repositories are registered in the current scope. With that in place, we can inject the UsersRepository into the UsersService
  // If you want to use the repository outside of the module which imports TypeOrmModule.forFeature, you'll need to re-export the providers generated by it. You can do this by exporting the whole module.
  imports: [
    TypeOrmModule.forFeature([User]),
    PassportModule.register({defaultStrategy: 'jwt'}),
    JwtModule.registerAsync({
      useFactory: (config: ApiConfigService) => {
        return {
          secret: config.configs.jwtSecret,
          signOptions: {expiresIn: config.configs.jwtExpiresIn || '1d'}
        }
      },
      inject: [ApiConfigService]
    })
  ],
  providers: [UserService],
  exports: [UserService]
})
export class UserApiSharedModule {}
